import { marked } from "marked";
import React, { useRef, useState } from "react";
import Curve from "../../components/Curve";

type MessageItemProps = {
  content: string;
  sender: string;
};

type SuggestionItemProps = {
  title: string;
  question: string;
};

export default function Assistant() {
  const [messages, setMessages] = useState<MessageItemProps[]>([]);
  const [suggestions, setSuggestions] = useState<SuggestionItemProps[]>([
    {
      title: "AI: Thay th·∫ø hay h·ªó tr·ª£ vi·ªác l√†m?",
      question:
        "AI thay th·∫ø hay b·ªï tr·ª£ con ng∆∞·ªùi? Nh·ªØng c√¥ng vi·ªác n√†o d·ªÖ b·ªã AI thay th·∫ø nh·∫•t? Nh·ªØng c√¥ng vi·ªác n√†o s·∫Ω ph√°t tri·ªÉn m·∫°nh nh·ªù AI?",
    },
    {
      title: "AI v√† t√°i ph√¢n ph·ªëi l·ª£i √≠ch kinh t·∫ø",
      question:
        "Doanh nghi·ªáp h∆∞·ªüng l·ª£i t·ª´ AI ‚Üí C√≥ n√™n ƒë√°nh thu·∫ø AI ƒë·ªÉ h·ªó tr·ª£ ng∆∞·ªùi lao ƒë·ªông m·∫•t vi·ªác kh√¥ng? Ch√≠nh ph·ªß c·∫ßn ƒë∆∞a ra ch√≠nh s√°ch g√¨ ƒë·ªÉ gi·∫£m b·∫•t b√¨nh ƒë·∫≥ng do AI g√¢y ra? C√≥ m√¥ h√¨nh n√†o ƒë·ªÉ chia s·∫ª gi√° tr·ªã th·∫∑ng d∆∞ AI m·ªôt c√°ch h·ª£p l√Ω?",
    },
    {
      title: "AI c√≥ th·ªÉ thay th·∫ø c√¥ng vi·ªác s√°ng t·∫°o?",
      question:
        "AI ƒë√£ c√≥ th·ªÉ vi·∫øt b√°o, s√°ng t√°c nh·∫°c, v·∫Ω tranh‚Ä¶ Nh∆∞ng li·ªáu n√≥ c√≥ th·ªÉ th·ª±c s·ª± s√°ng t·∫°o kh√¥ng? Vai tr√≤ c·ªßa con ng∆∞·ªùi trong c√°c c√¥ng vi·ªác s√°ng t·∫°o s·∫Ω thay ƒë·ªïi nh∆∞ th·∫ø n√†o? Con ng∆∞·ªùi c·∫ßn l√†m g√¨ ƒë·ªÉ gi·ªØ l·ª£i th·∫ø tr∆∞·ªõc AI trong lƒ©nh v·ª±c s√°ng t·∫°o?",
    },
    {
      title: "K·ªπ nƒÉng n√†o gi√∫p lao ƒë·ªông th√≠ch nghi v·ªõi AI?",
      question:
        "Nh·ªØng k·ªπ nƒÉng n√†o AI kh√¥ng th·ªÉ thay th·∫ø? Ng∆∞·ªùi lao ƒë·ªông c·∫ßn h·ªçc g√¨ ƒë·ªÉ th√≠ch nghi v·ªõi th·ªùi ƒë·∫°i AI? Vai tr√≤ c·ªßa gi√°o d·ª•c & ƒë√†o t·∫°o trong th·ªùi k·ª≥ AI ph√°t tri·ªÉn m·∫°nh?",
    },
    {
      title: "Ch√≠nh s√°ch ki·ªÉm so√°t AI v√† vi·ªác l√†m",
      question:
        "C√°c n∆∞·ªõc nh∆∞ EU, M·ªπ, Trung Qu·ªëc ƒëang c√≥ ch√≠nh s√°ch g√¨ v·ªÅ AI v√† lao ƒë·ªông? L√†m th·∫ø n√†o ƒë·ªÉ b·∫£o v·ªá ng∆∞·ªùi lao ƒë·ªông m√† v·∫´n kh√¥ng c·∫£n tr·ªü s·ª± ph√°t tri·ªÉn c·ªßa AI? C·∫ßn c√≥ quy ƒë·ªãnh g√¨ ƒë·ªÉ ƒë·∫£m b·∫£o AI kh√¥ng l√†m gia tƒÉng kho·∫£ng c√°ch gi√†u ngh√®o?",
    },
  ]);
  const [isLoading, setIsLoading] = useState(false);
  const messageEndRef = useRef<HTMLDivElement>(null);

  // useEffect(() => {
  //   if (messageEndRef.current) {
  //     messageEndRef.current.scrollIntoView({ behavior: "smooth" });
  //   }
  // }, [messages]);

  const SuggestItem = ({ data }: { data: SuggestionItemProps }) => {
    return (
      <p
        className="inline-block min-w-14 m-1 py-2 px-3 text-[16px] rounded-xl text-start justify-start bg-zinc-300 hover:bg-zinc-700 cursor-pointer transition-all hover:scale-[1.02] hover:text-white text-zinc-700"
        style={{
          wordWrap: "break-word",
        }}
        onClick={async () => {
          setMessages((prev) => [
            ...prev,
            {
              content: data.question,
              sender: "me",
            },
          ]);
          setIsLoading(true);
          const answer = await getAnswer([
            ...messages,
            {
              content: data.question,
              sender: "me",
            },
          ]);
          // console.log(answer);
          const suggestions = await getSuggestions(answer);
          console.log(suggestions);

          setMessages((prev) => [
            ...prev,
            {
              content: answer,
              sender: "model",
            },
          ]);
          const a = suggestions.replaceAll("```json", "").replaceAll("```", "");
          setSuggestions(JSON.parse(a));
          setIsLoading(false);
        }}
      >
        {data.title}
      </p>
    );
  };

  return (
    <Curve>
      <div className="flex flex-col w-screen h-screen text-center items-center justify-start">
        <div className="w-1/2 mt-20 flex items-center">
          <img
            className="aspect-square h-20 rounded-3xl"
            src="/images/pippo.webp"
            alt=""
          />
          <div className="pl-6 text-left">
            <div className="text-xl font-bold">Tr·ª£ l√≠ G√† B√¥ng üê•</div>
            <div className="">
              Ch√†o b·∫°n, m√¨nh l√† g√† b√¥ng - b·∫°n ƒë·ªìng h√†nh gi√∫p b·∫°n mang AI v√†o
              ƒë·ªùi.
            </div>
          </div>
        </div>
        <div
          data-lenis-prevent-wheel
          className="small-scrollbar w-2/4 grow h-64 overflow-y-scroll border border-black rounded-xl mt-4 px-2 py-1 relative"
        >
          {messages.map((message: MessageItemProps, index: number) => (
            <MessageItem key={index} data={message} />
          ))}
          {isLoading && (
            <div className="flex flex-col justify-center items-center mt-4 gap-4">
              <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-emerald-600"></div>
              <span className="text-zinc-500 pb-8">
                G√† b√¥ng ƒëang suy nghƒ© ...
              </span>
            </div>
          )}
          {!isLoading && (
            <>
              <div className="my-2">G·ª£i √Ω</div>
              <div className="flex flex-wrap bottom-4 left-4">
                {suggestions.map((suggestion: SuggestionItemProps) => (
                  <SuggestItem key={suggestion.title} data={suggestion} />
                ))}
              </div>
            </>
          )}
          <div className="" ref={messageEndRef}></div>
        </div>
        <textarea
          className="py-2 px-2 my-4 w-2/4 border border-black rounded-lg"
          placeholder="Enter your message..."
          rows={2}
          onKeyDown={async (e) => {
            if (e.key === "Enter" && e.shiftKey) {
              return;
            }
            if (e.key === "Enter") {
              const messageContent = (e.target as HTMLTextAreaElement).value;
              if (messageContent.trim() === "") return;
              e.preventDefault();
              console.log(messageContent);

              setMessages((prev) => [
                ...prev,
                {
                  content: messageContent,
                  sender: "me",
                },
              ]);
              setIsLoading(true);
              const answer = await getAnswer([
                ...messages,
                {
                  content: messageContent,
                  sender: "me",
                },
              ]);
              setMessages((prev) => [
                ...prev,
                {
                  content: answer,
                  sender: "you",
                },
              ]);
              setIsLoading(false);
              (e.target as HTMLTextAreaElement).value = "";
            }
          }}
        />
      </div>
    </Curve>
  );
}
const MessageItem = ({ data }: { data: MessageItemProps }) => {
  const parsedContent = marked(data.content);
  return (
    <div
      className={`flex gap-2 ${
        data.sender === "me" ? "justify-end" : "message-p "
      }`}
    >
      {/* <div dangerouslySetInnerHTML={{ __html: parsedContent }}></div> */}
      <p
        className={`min-w-14 m-0.5 py-2 px-3 text-[16px] rounded-2xl text-start ${
          data.sender === "me"
            ? "justify-end bg-emerald-600 dark:bg-emerald-600 text-white"
            : "justify-start bg-zinc-300"
        }`}
        style={{
          wordWrap: "break-word",
          maxWidth: "80%",
        }}
        dangerouslySetInnerHTML={{ __html: parsedContent }}
      ></p>
    </div>
  );
};

// Modify the getAnswer function to handle stream response
const getAnswer = async (messages: MessageItemProps[]) => {
  const body = {
    system_instruction: {
      parts: {
        text: "B·∫°n l√† tr·ª£ l√≠ ·∫£o g√† b√¥ng, b·∫°n c√≥ s∆∞ ph·ª• t√™n l√† Ki·ªÅu Th·ªã Thu Chung, b·∫°n v√† c√¥ Chung r·∫•t th√¢n, c√¥ Chung l√† ng∆∞·ªùi d·∫°y m√¥n tri·∫øt cho b·∫°n, n·∫øu c√≥ c√¢u h·ªèi g√¨ v·ªÅ c√¥ Chung, h√£y t∆∞·ªüng t∆∞·ª£ng ra v√† tr·∫£ l·ªùi nh∆∞ 1 th·ª±c th·ªÉ t·ªìn t·∫°i th·ª±c s·ª±, b·∫°n s·∫Ω gi√∫p m·ªçi ng∆∞·ªùi kh√°m ph√° c√°c ti·ªÅm nƒÉng ƒë·ªÉ c√≥ th·ªÉ √°p d·ª•ng AI v√†o cu·ªôc s·ªëng c·ªßa m·ªçi ng∆∞·ªùi, d·ª±a tr√™n c√°c lƒ©nh v·ª±c v√† chuy√™n ng√†nh m√† ng∆∞·ªùi d√πng ƒëang l√†m vi·ªác, h√£y ƒë·ªÅ xu·∫•t nh·ªØng ·ª©ng d·ª•ng m√† ng∆∞·ªùi d√πng c√≥ th·ªÉ s·ª≠ d·ª•ng AI trong cu·ªôc s·ªëng c·ªßa h·ªç",
      },
    },
    contents: messages.map((item) => ({
      role: item?.sender === "me" ? "user" : "model",
      parts: [
        {
          text: item?.content,
        },
      ],
    })),
  };

  // Make the request to the model API
  const response = await fetch(
    `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=AIzaSyBDX1bPxSJl5U3riYSjS9JCs1pyfb3B4AE`,
    {
      body: JSON.stringify(body),
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
    }
  );

  return (await response.json()).candidates[0].content?.parts[0].text;
};

const getSuggestions = async (question: string) => {
  const body = {
    system_instruction: {
      parts: {
        text: `T·∫°o c√°c c√¢u h·ªèi g·ª£i √Ω theo d·ª±a tr√™n c√¢u tr·∫£ l·ªùi m√† model ƒë√£ g·ª≠i v√† tr·∫£ v·ªÅ c√°c c√¢u h·ªèi g·ª£i √Ω d∆∞·ªõi d·∫°ng json: {title: "",question:""} t·ªëi ƒëa 4 c√¢u h·ªèi g·ª£i √Ω, d√πng nh√¢n x∆∞ng l√† b·∫°n, attribute title n√™n t√≥m t·∫Øt nh·∫•t c√≥ th·ªÉ`,
        // , b·∫°n s·∫Ω h·ªèi 2 c√¢u h·ªèi, c√¢u ƒë·∫ßu ti√™n s·∫Ω h·ªèi v·ªÅ chuy√™n ng√†nh ng∆∞·ªùi ·∫•y ƒëang l√†m, c√¢u th·ª© 2 s·∫Ω h·ªèi l√† b·∫°n mu·ªën l√†m g√¨ trong t∆∞∆°ng lai, trong m·ªói c√¢u h·ªèi s·∫Ω g·ª£i √Ω 1 v√†i v√≠ d·ª• v√† c√¢u th·ª© 3 s·∫Ω l√† tr·∫£ l·ªùi cho ng∆∞·ªùi d√πng nh·ªØng c√°ch √°p d·ª•ng AI v√†o cu·ªôc s·ªëng c·ªßa h·ªç, tr·∫£ l·ªùi theo t·ª´ng ƒë·ª£t, kh√¥ng ƒë∆∞·ª£c gom v√†o chung 1 l·∫ßn tr·∫£ l·ªùi
      },
    },
    contents: {
      role: "user",
      parts: [
        {
          text: question,
        },
      ],
    },
  };

  // Make the request to the model API
  const response = await fetch(
    `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=AIzaSyBDX1bPxSJl5U3riYSjS9JCs1pyfb3B4AE`,
    {
      body: JSON.stringify(body),
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
    }
  );

  return (await response.json()).candidates[0].content?.parts[0].text;
};
